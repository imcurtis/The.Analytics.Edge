pisaTrain <- read.csv("pisa2009train.csv")
pisaTest <- read.csv("pisa2009test.csv")
setwd("~/The Analytics Edge/Week 2")
pisaTrain <- read.csv("pisa2009train.csv")
pisaTest <- read.csv("pisa2009test.csv")
pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White")
pisaTest$raceeth = relevel(pisaTest$raceeth, "White")
str(pisaTrain$raceeth)
summary(pisaTrain$raceeth)
lmScore = lm(readingScore ~ Asian, Hispanic, Native Hawaiian/Other Pacific Islander, American Indian/Alaska Native, Black, More than one race, data = Train)
lmScore = lm(readingScore ~ Asian, Hispanic, Native Hawaiian/Other Pacific Islander, American Indian/Alaska Native, Black, More than one race, data = pisaTrain$raceeth)
LinReg = lm(readingScore ~ Asian, Hispanic, Native Hawaiian/Other Pacific Islander, American Indian/Alaska Native, Black, More than one race, data = pisaTrain$raceeth)
LinReg = lm(readingScore ~ Asian, Hispanic, Native Hawaiian/Other Pacific Islander, American Indian/Alaska Native, Black, More than one race, data = pisaTrain)
lmScore = lm(readingScore ~ Asian, Hispanic, Native Hawaiian/Other Pacific Islander, American Indian/Alaska Native, Black, More than one race, data = pisaTrain)
lmScore = lm(readingScore ~ Asian + Hispanic + Native Hawaiian/Other Pacific Islander + American Indian/Alaska Native + Black + More than one race, data = pisaTrain)
pisaTest$raceeth = relevel(pisaTest$raceeth, "White")
pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White")
lmScore = lm(readingScore ~ .,data = pisaTrain)
lmScore = lm(readingScore ~ .,data = pisaTrain$raceeth)
lmScore = lm(readingScore ~ .,data = pisaTrain)
str(lmScore)
summary(lmScore)
RMSE <- sqrt(mean((y-y_pred)^2))
SSE = sum (lmScore$residuals^2)
RMSE = sqrt(SSE/N)
SSE = sum (lmScore$residuals^2)
SSE
RMSE = sqrt(SSE/3663)
SSE
RMSE = sqrt(SSE/3663)
sqrt(12993365/3363)
SSE = sum(lmScore$residuals^2)
SSE
RMSE = sqrt(SSE / nrow(pisaTrain))
SSE = sum(lmScore$residuals^2)
RMSE = sqrt(SSE / nrow(pisaTrain))
RMSE = sqrt(12993365 / nrow(pisaTrain))
sqrt(mean(lmScore$residuals^2))
newdata = pisaTrain
predTest = predict(lmScore, newdata=pisaTrain)
summary(predTest)
636.3-332.7
predTest = predict(lmScore, newdata=pisaTest)
summary(predTest)
637.7-353.2
predTest = predict(lmScore, newdata=pisaTrain)
predTest = predict(lmScore, newdata=pisaTrain)
summary(predTest)
lmScore = lm(readingScore ~ .,data = pisaTest)
lmScore = lm(readingScore ~ .,data = pisaTest)
SSE = sum(lmScore$residuals^2)
SSE
sqrt(mean(lmScore$residuals^2))
SSE = sum((predTest-lmScore$residuals)^2)
predTest = predict(lmScore, newdata=pisaTest)
SSE = sum((predTest-lmScore$residuals)^2)
SSE = sum((predTest-pisaTest$readingScore)^2)
SSE
sum((predTest-pisaTest$readingScore)^2)
predTest = predict(lmScore, newdata=pisaTest)
summary(predTest)
predTest = predict(lmScore, newdata=pisaTest)
summary(predTest)
predTest = predict(lmScore, newdata=pisaTest)
d
summary(predTest)
predTest = predict(lmScore, newdata=pisaTest)
summary(predTest)
pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White")
pisaTest$raceeth = relevel(pisaTest$raceeth, "White")
lmScore = lm(readingScore ~ .,data = pisaTrain)
summary(lmScore)
sqrt(mean(lmScore$residuals^2))
newdata = pisaTrain
predTest = predict(lmScore, newdata=pisaTest)
summary(predTest)
lmScore = lm(readingScore ~ .,data = pisaTest)
sum((predTest-pisaTest$readingScore)^2)
lmScore = lm(readingScore ~ .,data = pisaTest)
sum((predTest-pisaTest$readingScore)^2)
sqrt(mean(lmScore$residuals^2))
sqrt(mean((predTest-pisaTest$readingScore)^2))
predTest
sum((predTest-pisaTest$readingScore)^2, na.rm=True)
sum((predTest-pisaTest$readingScore)^2, na.rm=TRUE)
sqrt(mean((predTest-pisaTest$readingScore)^2, na.rm=TRUE))
lmScore = lm(readingScore ~ .,data = pisaTrain)
summary(lmScore)
predTrain = predict(lmScore, newdata=pisaTrain)
summary(predTrain)
mean(pisaTrain$readingScore)
sum((predTrain-pisaTest$readingScore)^2, na.rm=TRUE)
summary(predTrain)
summary(predTest)
predTest = predict(lmScore, newdata=pisaTest)
View(pisaTrain)
mean(predTrain)
mean(predTrain, na.rm=TRUE)
sum((518-pisaTest$readingScore)^2, na.rm=TRUE)
baseline = mean(pisaTrain$readingScore)
sum((base-pisaTest$readingScore)^2, na.rm=TRUE)
sum((baseline-pisaTest$readingScore)^2, na.rm=TRUE)
sum((baseline-pisaTest$readingScore)^2)
predTrain = predict(lmScore, newdata=pisaTest)
predTest = predict(lmScore, newdata=pisaTest)
mean(pisaTest$readingScore)
sum((baseline-pisaTest$readingScore)^2)
predTest = predict(lmScore, newdata=pisaTest)
summary(predTest)
sum((predTest-pisaTest$readingScore)^2, na.rm=TRUE)
lmScore = lm(readingScore ~ .,data = pisaTest)
sqrt(mean((predTest-pisaTest$readingScore)^2, na.rm=TRUE))
sum((baseline-pisaTest$readingScore)^2)
sum((predTest-pisaTest$readingScore)^2, na.rm=TRUE)
pisaTrain = na.omit(pisaTrain)
str(pisaTrain)
pisaTest = na.omit(pisaTest)
str(pisaTest)
sum((baseline-pisaTest$readingScore)^2)
baseline = mean(pisaTrain$readingScore)
baseline = mean(pisaTrain$readingScore)
baseline
sum((baseline-pisaTest$readingScore)^2)
lmScore = lm(readingScore ~ .,data = pisaTest)
summary(lmScore)
1- 5762082/7802354
FluTrain <- read.csv("FluTrain.csv")
summary(FluTrain)
max(FluTrain$ILI)
max(FluTrain$Week)
max(FluTrain$Week, ILI)
tapply(FluTrain$Week, FluTrain$ILI)
Visits <- tapply(FluTrain$Week, FluTrain$ILI)
MostVisits <- max(Visits)
Most Visists
MostVisists
MostVisits
head(FluTrain$ILI)
summary(FluTrain)
str(FluTrain)
max(FluTrain)
max(data.frame(FluTrain))
Visits <- tapply(max(FluTrain$ILI, FluTrain$Week))
Visits <- tapply(max(FluTrain$ILI, FluTrain$Week))
Visits <- max(tapply(FluTrain$ILI, FluTrain$Week))
Visits
max(FluTrain$ILI)
Highest <- max(FluTrain$ILI)
df[row,]
df[row,Highest]
which(FluTrain$ILI = 7.618892)
which(FluTrain$ILI == 7.618892)
?which
FluTrain$ILI
which(FluTrain$ILI == 7.618892)
w = which(FluTrain$ILI == 7.618892)
w
which.max(FluTrain$ILI)
FluTrain$Week == 303
(FluTrain$Week[which.max(FluTrain$ILI)])
which.max(FluTrain$ILI)
(FluTrain$Week[which.max(FluTrain$Queries)])
plot(ILI)
plot(FluTrain$ILI)
plot(hist(FluTrain$ILI))
plot(log(ILI), Queries)
plot(log(FluTrain$ILI), Queries)
plot(log(FluTrain$ILI), FluTrain$Queries)
FluTrend1 <- lm(log(ILI))
FluTrend1 <- lm(log(FluTrain$ILI))
FluTrend1 <- lm(log(ILI))
FluTrend1 <- lm(log(ILI), Queries)
FluTrend1 <- lm(log(FluTrain$ILI), FluTrain$Queries)
FluTrend1 <- lm(log(ILI), Queries, data= FluTrain)
FluTrend1 <- lm(log(ILI) ~ Queries, data = FluTrain)
FluTrend1
summary(FluTrend1)
cor(ILI, Queries)
cor(FluTrain$ILI, FluTrain$Queries)
0.8142115^2
log(1/0.8142115)
exp(-0.5*8142115)
exp(-0.5*8142115)
exp((-0.5)*8142115)
exp((-0.5)*.8142115)
cor(FluTrain$ILI, FluTrain$Queries)
cor(FluTrain$Queries, FluTrain$ILI)
Correlation<_cor(FluTrain$ILI, FluTrain$Queries)
Correlation<-cor(FluTrain$ILI, FluTrain$Queries)
log(1/Correlation)
Correlation^2
exp(-0.5*Correlation)
cor(FluTrain$Queries, log(FluTrain$ILI)
cor(FluTrain$Queries, log(FluTrain$ILI))
Correlation = cor(FluTrain$Queries, log(FluTrain$ILI))
Correlation^2
FluTest <- read.csv("FluTest.csv")
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
?which
which(FluTrain$Week, March 11, 2012 = TRUE)
head(FluTest)
which(FluTrain$Week, 2012-03-11 - 2012-03-18 = TRUE)
which(2012-03-11 - 2012-03-18, useNames = TRUE)
(FluTrain$Week[which.max(FluTrain$Queries)])
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
head(PredTest1)
which(PredTest1$Week == 2012-03-11 - 2012-03-18)
PredTest1
(FluTest$Week[which(FluTest$ILI)])
(FluTest$Week[which.max(FluTest$ILI)])
which.max(FluTrain$ILI)
which.max(FluTest$ILI)
FluTest$Week[10]
FluTest$Week[11]
FluTest$ILI[11]
exp(2.293422)
which(FluTest$Week == "2012-03-11 - 2012-03-17")
PredTest1[11]
ObsTest1 = exp(FluTrend1, newdata=FluTest)
FluTest[11]
FluTest$ILI[11]
RelativeError= (2.293422-2.187378)/2.293422
RelativeError
?rmse
?error
sqrt(mean((FluTest-PredTest)^2))
sqrt(mean((FluTest-PredTest1)^2))
sqrt(mean((PredTest1)^2))
sqrt(mean(FluTest)^2)
sqrt(mean((FluTest)^2))
sqrt(mean((FluTest$ILI)^2))
2.529433-1.896401
SSE = sum((PredTest1-FluTest$ILI)^2)
RMSE = sqrt(SSE / nrow(FluTest))
RMSE
install.packages("zoo")
source('~/.active-rstudio-document', echo=TRUE)
ILILag2 = lag(zoo(FluTrain$ILI), -2, na.pad=TRUE)
FluTrain$ILILag2 = coredata(ILILag2)
(FluTrain$ILILag2)
summary(FluTrain$ILILag2)
plot(log(ILILag2), log(ILI))
plot(log(FluTrain$ILILag2), log(FluTrain$ILI))
FluTrend1 <- lm(log(ILI) ~ Queries + log(ILILag2), data = FluTrain)
FluTrend2 <- lm(log(ILI) ~ Queries + log(ILILag2), data = FluTrain)
FluTrend2
summary(FluTrend2)
ILILag2 = lag(zoo(FluTest$ILI), -2, na.pad=TRUE)
FluTest$ILILag2 = coredata(ILILag2)
summary(FluTest$ILILag2)
head(FluTest)
head(FluTrain)
tail(FluTrain)
FluTest$ILILag2[2] = FluTrain$ILI[417]
FluTest$ILILag2[1] = FluTrain$ILI[416]
FluTest$ILILag2[1]
FluTest$ILILag2[2]
PredTest2 = exp(predict(FluTrend2, newdata=FluTrain))
PredTest2 = exp(predict(FluTrend2, newdata=FluTrain))
SSE = sum((PredTest2-FluTest$ILI)^2)
#Divide by number of observations
RMSE = sqrt(SSE / nrow(FluTest))
RMSE
SSE = sum((PredTest2-FluTest$ILI)^2)
PredTest2 = exp(predict(FluTrend2, newdata=FluTrain))
PredTest2
SSE = sum(na.omit(PredTest2-FluTest$ILI)^2)
SSE = sum((PredTrain1-FluTrain$ILI)^2)
PredTrain1 = exp(predict(FluTrend2, newdata=FluTrain))
SSE = sum((PredTrain1-FluTrain$ILI)^2)
RMSE = sqrt(SSE / nrow(FluTest))
RMSE
SSE = sum((PredTrain1-FluTrain$ILI)^2)
SSE
PredTrain
PredTrain1
FluTrain$ILI
SSE = sum(na.omit(PredTrain1-FluTrain$ILI)^2)
RMSE = sqrt(SSE / nrow(FluTest))
RMSE
PredTest2 = exp(predict(FluTrend2, newdata=FluTrain))
PredTest2 = exp(predict(FluTrend2, newdata=FluTest))
SSE = sum(na.omit(PredTest2-FluTrain$ILI)^2)
SSE = sum(na.omit(PredTest2-FluTest$ILI)^2)
#Divide by number of observations
RMSE = sqrt(SSE / nrow(FluTest))
RMSE
FluTrend1
FluTrend2
summary(FluTrend1)
summary(FluTrend2)
SSE = sum((PredTest1-FluTest$ILI)^2)
RMSE = sqrt(SSE / nrow(FluTest))
RMSE
exp(-1)
1-0.3678794
0.3678794/0.6321206
quality = read.csv("quality.csv")
install.packages("caTools")
library(caTools)
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
QualityLog = glm(PoorCare ~ StartedOnCombination + ProviderCount, data=qualityTrain, family=binomial)
QualityLog
10/25
install.packages("ROCR")
library("ROCR")
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTest, family=binomial)
QualityLog
predictTest = predict(QualityLog, type="response", newdata=qualityTest)
predictTest
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
predictTest = predict(QualityLog, type="response", newdata=qualityTest)
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTest)
QualityLog
predictTest = predict(QualityLog, type="response", newdata=qualityTest)
predictTest
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
11/(187+11)
1069/1075
setwd("~/The Analytics Edge/Week 3")
read.csv("songs.csv")
songs <- read.csv("songs.csv")
str(songs)
summary(songs)
table(songs$year)
(artistname = "Michael Jackson")
sum(artistname = "Michael Jackson")
songs$artistname
table(songs$artistname)
MichaelJackson = subset(songs, artistname == "Michael Jackson")
str(MichaelJackson)
table(MichaelJackson$Top10)
MichaelJackson$Top10
Top10 = subset(MichaelJackson, Top10 = "1")
Top10
Top10 = subset(songtitle, Top10 = "1")
Top 10 = subset(MichaelJackson, Top10 = "1")
Top10 = subset(MichaelJackson, Top10 = "1")
Top10
Top10 = subset(MichaelJackson, songtitle, Top10 = "1")
tapply(MichaelJackson$songtitle, MichaelJackson$Top10)
sapply(MichaelJackson$songtitle, MichaelJackson$Top10)
lapply(MichaelJackson$songtitle, MichaelJackson$Top10)
tapply(MichaelJackson$songtitle, MichaelJackson$Top10)
songs <- read.csv("songs.csv")
summary(songs)
View(songs)
unique(song$artistname)
sort(unique(songs$artistname))
MichaelJackson = subset(songs, artistname == "Michael Jackson")
View(MichaelJackson)
read.csv
Top10 == `
Top10 == 1
Top10 = subset(MichaelJackson, Top10 = "1")
Top10
MichaelJackson$Top10 == 1
JacksonSongs <- (MichaelJackson$songtitle[JacksonHits])
JacksonHits <- (MichaelJackson$Top10 == 1)
JacksonSongs <- (MichaelJackson$songtitle[JacksonHits])
JacksonSongs
(MichaelJackson$songtitle & MichaelJackson$Top10 == "1")
(songs$artistname == "Michael Jackson" & song$Top10 == "1")
(songs$artistname == "Michael Jackson" & songs$Top10 == "1")
HitSongs <- (songs$artistname == "Michael Jackson" & songs$Top10 == "1")
HitSongz < (MichaelJackson$songtitle[HitSongs])
HitSongz < (MichaelJackson$songtitle[HitSongs])
HitSongz <- (MichaelJackson$songtitle[HitSongs])
HitSongz
sum(HitSongs)
HitSongz <- (songs$songtitle[HitSongs])
HitSongz
sort(unique(songs$timesignature))
which.max(songs$timesignature)
sort(songs$timesignature)
table(songs$timesignature)
songs
summary(songs)
FastestSong = (songs$tempo == "244.31")
FastestSongz = (songs$songtitle[FastestSong])
FastestSongz
table(songs$tempo)
which.max(songs$tempo)
songs$songtitle[6206]
