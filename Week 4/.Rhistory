setwd("~/The Analytics Edge/Week 4")
Claims = read.csv("ClaimsData.csv")
str(Claims)
Claims = read.csv("ClaimsData.csv")
Claims = read.csv("ClaimsData.csv")
library(caTools)
str(Claims)
library(caTools)
set.seed(88)
spl = sample.split(Claims$bucket2009, SplitRatio = 0.6)
ClaimsTrain = subset(Claims, spl==TRUE)
ClaimsTest = subset(Claims, spl==FALSE)
mean(ClaimsTrain$age)
mean(ClaimsTrain$diabetes)
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
PenaltyMatrix = matrix(c(0,1,2,3,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), byrow=TRUE, nrow=5)
PenaltyMatrix
table(ClaimsTest$bucket2009, ClaimsTest$bucket2008)
ClaimsTest$bucket2009
ClaimsTest$bucket2008
table(ClaimsTest$bucket2009, ClaimsTest$bucket2008)
PenaltyMatrix = matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), byrow=TRUE, nrow=5)
PenaltyMatrix
table(ClaimsTest$bucket2009, ClaimsTest$bucket2008)
110138/nrow(ClaimsTest)
table(ClaimsTest$bucket2009)
library(rpart)
library(rpart.plot)
# CART model
ClaimsTree = rpart(bucket2009 ~ age + alzheimers + arthritis + cancer + copd + depression + diabetes + heart.failure + ihd + kidney + osteoporosis + stroke + bucket2008 + reimbursement2008, data=ClaimsTrain, method="class", cp=0.00005)
prp(ClaimsTree)
# Make predictions
PredictTest = predict(ClaimsTree, newdata = ClaimsTest, type = "class")
table(ClaimsTest$bucket2009, PredictTest)
(114141 + 16102 + 118 + 201 + 0)/nrow(ClaimsTest)
# Penalty Error
as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix
sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
# New CART model with loss matrix
ClaimsTree = rpart(bucket2009 ~ age + alzheimers + arthritis + cancer + copd + depression + diabetes + heart.failure + ihd + kidney + osteoporosis + stroke + bucket2008 + reimbursement2008, data=ClaimsTrain, method="class", cp=0.00005, parms=list(loss=PenaltyMatrix))
# Redo predictions and penalty error
PredictTest = predict(ClaimsTree, newdata = ClaimsTest, type = "class")
table(ClaimsTest$bucket2009, PredictTest)
(94310 + 18942 + 4692 + 636 + 2)/nrow(ClaimsTest)
sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
setwd("~/The Analytics Edge/Week 4")
gerber <- read.csv("gerber.csv")
str(gerber)
mean(gerber$voting)
table(gerber$voting, gerber$civicduty)
12021/nrow(VotingCivicDuty)
VotingCivicDuty <- table(gerber$voting, gerber$civicduty)
12021/nrow(VotingCivicDuty)
12021/(12021+26197+96675+209191)
VotingHawthorne <- table(gerber$voting, gerber$hawthorne)
VotingHawthrone
VotingHawthorne
12316/(12316+96380+25888+209500)
VotingSelf <- table(gerber$voting, gerber$self)
VotingSelf
13191+(13191+25027+95505+210361)
13191/(13191+25027+95505+210361)
VotingNeighbors <- table(gerber$voting, gerber$neighbors)
VotingNeighbors
14438/(14438+211625+23763+94258)
votes <- glm(voting ~ civicduty, hawthorne, neighbors, self, data=gerber, family="binomial")
votes <- glm(voting ~ civicduty + hawthorne + neighbors + self, data=gerber, family="binomial")
summary(votes)
library(caTools)
split = sample.split(gerber$voting, SplitRatio = 0.3)
votingtrain = subset(parole, split == TRUE)
votingtest = subset(parole, split == FALSE)
library(caTools)
split = sample.split(gerber$voting, SplitRatio = 0.7)
train = subset(gerber, split == TRUE)
test = subset(gerber, split == FALSE)
preds <- predict(votes, type = "response")
table(gerber$voting, preds > .3)
51966+134513/(51966+134513+100875+56730)
51966+134513/(51966+134513+100875+56730)
(51966+134513)/(51966+134513+100875+56730)
table(gerber$voting, preds > .5)
preds <- predict(votes, type = "response")
table(gerber$voting, preds > .5)
108696/(108696+235388)
235388/(108696+235388)
table(gerber$voting)
235388/108696
235388/(108696+235388)
require(ROCR)
require(ROCR)
ROCRpred <- prediction(preds, gerber$voting)
auc <- as.numeric(performance(ROCRpred, "auc")@y.values)
auc
CARTmodel = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber)
plot(CARTmodel)
plot.rpart(CARTmodel)
CARTmodel
plot(CARTmodel)
rpart.plot(CARTmodel)
prp(CARTmodel)
require(rpart)
require(rpart.plot)
require(rpart)
require(rpart.plot)
rpart.plot(CARTmodel)
prp(CARTmodel)
CARTmodel = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber)
require(rpart)
require(rpart.plot)
rpart.plot(CARTmodel)
prp(CARTmodel)
require(rpart)
prp(CARTmodel2)
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
prp(CARTmodel2)
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + sex, data=gerber, cp=0.0)
prp(CARTmodel3)
controlReg <- rpart(voting ~ control, data = gerber, cp = 0.0)
controlSexReg <- rpart(voting ~ control + sex, data = gerber, cp = 0.0)
prp(controlReg, digits=6)
prp(controlSexReg, digits=6)
CARTmodel4 = rpart(voting ~ control, data=gerber, cp = 0.0)
prp(CARTmodel4, digits = 6)
CARTmodel4
abs(0.2966383 - 0.3400004)
prp(CARTmodel5, digits = 6)
CARTmodel5 = rpart(voting ~ control + sex, data=gerber, cp = 0.0)
prp(CARTmodel5, digits = 6)
abs(0.290456 - 0.302795)
abs(0.334176 - 0.345818)
0.012339 - 0.011642
controlandsex = glm(voting ~ control + sex, data=gerber, family="binomial")
controlandsex
summary(controlandsex)
Possibilities = data.frame(sex=c(0,0,1,1),control=c(0,1,0,1))
predict(LogModelSex, newdata=Possibilities, type="response")
Possibilities = data.frame(sex=c(0,0,1,1),control=c(0,1,0,1))
predict(controlandsex, newdata=Possibilities, type="response")
.2908065-.290456
controlandsex2 = glm(voting ~ sex + control + sex:control, data=gerber, family="binomial")
controlandsex2
predict(controlandsex2, newdata=Possibilities, type="response")
0.2904558 - 0.290456
letters = read.csv("letters_ABPR.csv")
library(caTools)
set.seed(1000)
split = sample.split(letters$isB, SplitRatio = 0.5)
lettersTrain = subset(letters, spl==TRUE)
lettersTest = subset(letters, spl==FALSE)
letters = read.csv("letters_ABPR.csv")
table(letters$isB, split > 0.5)
letters$isB
table(letters$isB)
summary(letters)
letters$isB = as.factor(letters$letter == "B")
summary(letters)
2350/(766+2350)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
letters = read.csv("letters_ABPR.csv")
CARTb = rpart(isB ~ . - letter, data=train, method="class")
summary(letters)
letters$isB = as.factor(letters$letter == "B")
summary(letters)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
summary(letters)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
require(rpart)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
letters = read.csv("letters_ABPR.csv")
summary(letters)
letters$isB = as.factor(letters$letter == "B")
letters = read.csv("letters_ABPR.csv")
summary(letters)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
letters$isB = as.factor(letters$letter == "B")
letters = read.csv("letters_ABPR.csv")
CARTb = rpart(isB ~ . - letter, data=lettersTrain, method="class")
library(caTools)
set.seed(1000)
split = sample.split(letters$isB, SplitRatio = 0.5)
lettersTrain = subset(letters, spl==TRUE)
lettersTest = subset(letters, spl==FALSE)
library(caTools)
set.seed(1000)
split = sample.split(letters$isB, SplitRatio == 0.5)
lettersTrain = subset(letters, spl==TRUE)
lettersTest = subset(letters, spl==FALSE)
library(caTools)
set.seed(1000)
split = sample.split(letters$isB, SplitRatio = 0.5)
lettersTrain = subset(letters, split==TRUE)
lettersTest = subset(letters, split==FALSE)
table(test$isB)
letters = read.csv("letters_ABPR.csv")
letters$isB = as.factor(letters$letter == "B")
library(caTools)
set.seed(1000)
split = sample.split(letters$isB, SplitRatio = 0.5)
lettersTrain = subset(letters, split==TRUE)
lettersTest = subset(letters, split==FALSE)
table(test$isB)
letters = read.csv("letters_ABPR.csv")
letters$isB = as.factor(letters$letter == "B")
library(caTools)
set.seed(1000)
split = sample.split(letters$isB, SplitRatio = 0.5)
lettersTrain = subset(letters, split==TRUE)
lettersTest = subset(letters, split==FALSE)
table(lettersTest$isB)
CARTb = rpart(isB ~ . - letter, data=lettersTrain, method="class")
summary(letters)
predCART = predict(CARTb, newdata = lettersTest, type="class")
table(predCART, test$isB)
table(test$isB, predCART)
library(rpart.plot)
CARTb = rpart(isB ~ . - letter, data=lettersTrain, method="class")
predCART = predict(CARTb, newdata = lettersTest, type="class")
table(test$isB, predCART)
table(lettersTest$isB)
CARTb = rpart(isB ~ . - letter, data=lettersTrain, method="class")
table(test$isB)
table(lettersTest$isB)
table(lettersTest$isB, predCART)
(1118+340)/(1118+340+43+57)
require(randomForest)
set.seed(1000)
require(randomForest)
bForest = randomForest(isB ~. - letter, data = "letters")
bForest = randomForest(isB ~. - letter, data= "letters")
bForest = randomForest(isB ~. - letter, data="letters")
table(lettersTest$isB, predB)
bForest = randomForest(isB ~. - letter, data="letters")
predB = predict(bForest, newdata = lettersTest)
table(lettersTest$isB, predB)
bForest = randomForest(isB ~. - letter, data=letters)
predB = predict(bForest, newdata = lettersTest)
table(lettersTest$isB, predB)
bForest = randomForest(isB ~. - letter, data=letters)
predB = predict(bForest, newdata = lettersTest)
table(lettersTest$isB, predB)
lettersSplit = sample.split(letters$letter, SplitRatio = 0.5)
train2 = subset(letters, split==TRUE)
test2 = subset(letters, split==FALSE)
table(letters$letter)
table(lettersTest$isB)
table(test2$letter)
table(test2$letter)/nrow(test2)
set.seed(2000)
letters$letter = as.factor(letters$letter)
lettersSplit = sample.split(letters$letter, SplitRatio = 0.5)
train2 = subset(letters, split==TRUE)
test2 = subset(letters, split==FALSE)
table(test2$letter)/nrow(test2)
table(train2$letter, predCART2)
CARTc = rpart(letter ~ . - isB, data=train2, method="class")
predCART2 = predict(CARTc, newdata = test2, type="class")
table(train2$letter, predCART2)
(78+82+97+101)/nrow(test2)
table(test2$letter, predCART2)
(338+294+357+365)/nrow(test2)
cForest = randomForest(letter ~. - isB, data=train2)
predC = predict(cForest, newdata = test2)
table(test2$letter, predC)
(381+373+391+383)/nrow(test2)
setwd("~/The Analytics Edge/Week 4")
census <- read.csv("census.csv")
set.seed(2000)
library(caTools)
split = sample.split(census$over50k, SplitRatio = 0.6)
train = subset(census, split == TRUE)
test = subset(census, split == FALSE)
set.seed(2000)
library(caTools)
split = sample.split(census, SplitRatio = 0.6)
train = subset(census, split == TRUE)
test = subset(census, split == FALSE)
mod = glm(over50k ~., data = train, family="binomial")
summary(mod)
split = sample.split(census$over50k, SplitRatio = 0.6)
train = subset(census, split == TRUE)
test = subset(census, split == FALSE)
mod = glm(over50k ~., data = train, family="binomial")
summary(mod)
preds <- predict(mod, type="response")
table(test$over50k, preds > 0.5)
table(test, preds > 0.5)
preds <- predict(mod, newdata = test, type="response")
table(test$over50k, preds >= 0.5)
split = sample.split(census$over50k, SplitRatio = 0.6)
train = subset(census, split == TRUE)
test = subset(census, split == FALSE)
mod = glm(over50k ~., data = train, family="binomial")
summary(mod)
preds <- predict(mod, newdata = test, type="response")
table(test$over50k, preds >= 0.5)
preds <- predict(mod, newdata = test, type= "response")
table(test$over50k, preds >= 0.5)
table(test$over50k)
9713/nrow(test)
length(preds)
length(test$over50k)
preds <- predict(mod$over50k, newdata = test, type= "response")
table(test$over50k, preds >= 0.5)
length(test$)
length(test)
length(preds)
length(test$over50k)
preds <- predict(mod, newdata = test, type= "response")
table(test$over50k, preds >= 0.5)
preds <- predict(mod, newdata = test, type= "response")
table(test$over50k, preds > 0.5)
require(ROCR)
ROCRpred <- prediction(preds, test$over50k)
auc <- as.numeric(performance(ROCRpred, "auc")@y.values)
auc
require(rpart)
library(rpart.plot)
CARTCensus = rpart(over50k ~ ., data=train, method="class")
CARTCensus
plot(CARTCensus)
prp(CARTCensus)
CARTPredict <- predict(CARTCensus, newdata = test, type = "response")
table(test$over50k, CARTPredict)
CARTPredict <- predict(CARTCensus, newdata = test, type = "response")
CARTPredict <- predict(CARTCensus, newdata = test, type = "class")
table(test$over50k, CARTPredict)
(9255+1561)/nrow(test)
require(ROCR)
ROCRpred <- prediction(CARTPredict, test$over50k)
auc <- as.numeric(performance(ROCRpred, "auc")@y.values)
auc
require(ROCR)
ROCRpred <- predict(CARTPredict, test$over50k)
auc <- as.numeric(performance(ROCRpred, "auc")@y.values)
auc
require(ROCR)
ROCRpred <- prediction(preds, test$over50k)
auc <- as.numeric(performance(ROCRpred, "auc")@y.values)
auc
require(ROCR)
ROCRpred <- prediction(preds, test$over50k)
ROCRperf <- performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize = T, print.cutoffs.at = seq(0, 1, 0.1), text.adj = c(-.2, 1, .7))
auc <- as.numeric(performance(ROCRpred, "auc")@y.values)
auc
CARTmodel <- rpart(over50k ~., newdata = train)
CART2 <- predict(CARTmodel, newdata = test)
table(test$over50k, CART2[,2] > 0.5)
CARTmodel <- rpart(over50k ~., data = train)
CART2 <- predict(CARTmodel, newdata = test)
table(test$over50k, CART2[,2] > 0.5)
(9255+1561)/nrow(test)
ROCRpred <- prediction(CART2[,2], test$over50k)
auc <- as.numeric(performance(ROCRpred, "auc")@y.values)
auc
ROCRpred <- prediction(CART2[,2], test$over50k)
ROCRperf <- performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize = T, print.cutoffs.at = seq(0, 1, 0.1), text.adj = c(-.2, 1, .7))
auc <- as.numeric(performance(ROCRpred, "auc")@y.values)
auc
ROCRpred <- prediction(preds, test$over50k)
ROCRperf <- performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize = T, print.cutoffs.at = seq(0, 1, 0.1), text.adj = c(-.2, 1, .7))
auc <- as.numeric(performance(ROCRpred, "auc")@y.values)
auc
set.seed(1)
trainSmall = train[sample(nrow(train), 2000), ]
set.seed(1)
require(randomForest)
bForest = randomForest(over50k ~., data=trainSmall)
summary(bForest)
predB = predict(bForest, newdata = test)
table(test$over50k, predB)
table(test$over50k, predB > 0.5)
table(test$over50k, predB >= 0.5)
table(test$over50k, predB)
(9427+1347)/nrow(test)
vu = varUsed(bForest, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(bForest$forest$xlevels[vusorted$ix]))
varImpPlot(bForest)
numfolds=trainControl(method="cv",number=10)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
train(over50k~.,data=train,method="rpart",trControl=numfolds,tunegrid=cpgrid)
library(e1071)
set.seed(2)
numfolds=trainControl(method="cv",number=10)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
train(over50k~.,data=train,method="rpart",trControl=numfolds,tunegrid=cpgrid)
library(e1071)
library(caret)
library(e1071)
set.seed(2)
numfolds=trainControl(method="cv",number=10)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
train(over50k~.,data=train,method="rpart",trControl=numfolds,tunegrid=cpgrid)
train(over50k~.,data=train,method="rpart",trControl=numfolds,tunegrid=cartgrid)
train(over50k~.,data=train,method="rpart",trControl=numfolds,tuneGrid=cartgrid)
train(over50k~.,data=train,method="rpart",trControl=numfolds,tuneGrid=cartGrid)
CARTmodel5 = rpart(over50k ~., data=train, cp = 0.002)
prp(CARTmodel5, digits = 6)
table(test$over50k, CARTmodel5)
AlligatorCART = predict(CARTmodel5, newdata = test, type = "class")
CARTmodel5 = rpart(over50k ~., data=train, cp = 0.002, method = "class")
table(test$over50k, CARTmodel5)
prediction = predict(CARTmodel5, newdata = test, type = "class")
prp(CARTmodel5, digits = 6)
table(test$over50k, prediction)
(9114+1884)/nrow(test)
summary(CARTmodel5)
# Unit 5 - Twitter
# VIDEO 5
# Read in the data
tweets = read.csv("tweets.csv", stringsAsFactors=FALSE)
str(tweets)
# Create dependent variable
tweets$Negative = as.factor(tweets$Avg <= -1)
table(tweets$Negative)
# Install new packages
install.packages("tm")
